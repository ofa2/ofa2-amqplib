{"version":3,"file":"bundle.esm.js","sources":["../src/url-parser.js","../src/index.js"],"sourcesContent":["import url from 'url';\nimport _ from 'lodash';\n\n/**\n * Name of the AMQP protocol used during URI creation.\n * @type {String}\n */\nconst DEFAULT_PROTOCOL = 'amqp';\n\n/**\n * URI parameters accepted by the AMQP RabbitMQ spec.\n * See https://www.rabbitmq.com/uri-spec.html\n *\n * @type {Array}\n */\nconst DEFAULT_PARAMETERS = ['frameMax', 'channelMax', 'heartbeat', 'locale'];\n\n/**\n * Determines if an object has, at least, one attribute.\n * @param  {Object} obj Any object.\n * @return {Boolean}    true if `obj` has, at least, one property;\n *                           false, otherwise.\n */\nconst isObjectNotEmpty = (obj) => {\n  return obj && Object.keys(obj).length;\n};\n\n/**\n * Adds query parameters provided by `query` to the `uri` object.\n * @param  {Object} A map of URI query parameters.\n * @param  {Object} uri   An URI object descriptor.\n * @return {Object} The URI object with the new query parameters.\n */\nconst queryParse = _.curry((query, uri) => {\n  const queryWithDefaultParameters = Object.assign(\n    {},\n    uri.query,\n    _.pick(query, DEFAULT_PARAMETERS)\n  );\n  return isObjectNotEmpty(queryWithDefaultParameters)\n    ? Object.assign({}, uri, { query: queryWithDefaultParameters })\n    : uri;\n});\n\n/**\n * Prefixes an `amqp://` protocol if none was specified in `uri`. If one is\n * present, this function does nothing and returns `uri` as is.\n * @param  {String} uri An AMQP URI string.\n * @return {String}     The URI string with a prepended protocol.\n */\nconst protocol = (uri) => {\n  const parts = uri.split('://');\n  return parts.length > 1 ? uri : `${DEFAULT_PROTOCOL}://${uri}`;\n};\n\n/**\n * Adds an `auth` property to the `uri` descriptor object containing\n * `auth.username` and `auth.password` separated by a semicolon (':').\n * @param  {Object} An object with `password` and `username` properties.\n * @param  {Object} uri   An URI object descriptor.\n * @return {Object} The URI object with the new auth attribute.\n */\nconst auth = _.curry(({ username, password }, uri) => {\n  return !uri.auth && username && password\n    ? Object.assign({}, uri, { auth: [username, password].join(':') })\n    : uri;\n});\n\n/**\n * Adds a `port` property to the `uri` descriptor object if it doesn't contain\n * one already.\n * @param  {Object} An object with a numeric `port`.\n * @param  {Object} uri   An URI object descriptor.\n * @return {Object} The URI object with the new port attribute.\n */\nconst portParse = _.curry(({ port }, uri) => {\n  return !uri.port && port ? Object.assign({}, uri, { port }) : uri;\n});\n\n/**\n * Adds a `pathname` property to the `uri` descriptor object, if it doesn't\n * contain one already.\n * @param  {Object} An object with `vhost` or `path` properties.\n * @param  {Object} uri   An URI object descriptor.\n * @return {Object} The URI object with the new pathname attribute.\n */\nconst vhostParse = _.curry(({ vhost, path }, uri) => {\n  const pathname = vhost || path;\n  return !uri.pathname && vhost ? Object.assign({}, uri, { pathname }) : uri;\n});\n\n/**\n * Removes the `host` attribute of `uri` if `opts.host` is not defined. Otherwise,\n * returns the `uri` as is.\n * @param  {Object} An object with a `host` property.\n * @param  {Object} uri   An URI object descriptor.\n * @return {Object} The URI object with host removed (or unmodified).\n */\nconst removeHost = _.curry(({ host }, uri) => {\n  return host === undefined ? Object.assign({}, uri, { host }) : uri;\n});\n\n/**\n * Composes a set of functions to build a single URI formatter function\n * that receives an URI string and returns its normalised version.\n * @param  {Object} opts Options used in URI building.\n * @return {Function}      An URI formatter function.\n */\nconst createUriFormatter = (opts) => {\n  return _.flowRight(\n    url.format,\n    vhostParse(opts),\n    portParse(opts),\n    queryParse(opts),\n    auth(opts),\n    removeHost(opts),\n    url.parse,\n    protocol\n  );\n};\n\n/**\n * Creates and returns a URI string from a descriptor object with options.\n * For a set of available options see: https://nodejs.org/api/url.html\n * Additionally, 'frameMax', 'channelMax', 'heartbeat' and 'locale' may be used\n * as options.\n *\n * @param  {Object} opts Options for URI building.\n * @return {String}     The formatted string URI.\n */\nfunction format(opts = {}) {\n  const uri = opts.hostname || opts.host || opts.url || opts.href || '';\n  const formatUri = uri && createUriFormatter(opts);\n  return formatUri ? formatUri(uri) : uri;\n}\n\nexport { format };\nexport default format;\n","import _ from 'lodash';\nimport amqp from 'amqp-connection-manager';\n\nimport { format } from './url-parser';\n\nasync function lift() {\n  let amqpConfig = _.get(framework, 'config.connections.amqplib');\n  let url = format(amqpConfig);\n  framework.amqplibConnection = await amqp.connect(url);\n  return framework.amqplibConnection;\n}\n\nasync function lower() {\n  try {\n    if (framework.amqplibConnection) {\n      await framework.amqplibConnection.close();\n    }\n  }\n  catch (e) {\n    framework.log.warn(e);\n  }\n}\n\nexport { lift, lower };\nexport default { lift, lower };\n"],"names":["DEFAULT_PROTOCOL","DEFAULT_PARAMETERS","isObjectNotEmpty","obj","Object","keys","length","queryParse","_","curry","query","uri","queryWithDefaultParameters","assign","pick","protocol","parts","split","auth","username","password","join","portParse","port","vhostParse","pathname","vhost","path","removeHost","host","undefined","createUriFormatter","opts","flowRight","url","format","parse","hostname","href","formatUri","lift","amqpConfig","get","framework","amqplibConnection","amqp","connect","lower","close","e","log","warn"],"mappings":"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"}